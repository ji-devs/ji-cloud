name: Module - App

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - sandbox
    paths:
      - '.github/workflows/frontend-module-app.yml'
      - 'shared/**'
      - 'frontend/config/**'
      - 'frontend/apps/crates/components/**'
      - 'frontend/apps/crates/utils/**'
      - 'frontend/apps/crates/entry/module/**'

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-22.04
    outputs:
      branch: "${{ steps.branch.outputs.value }}"
    steps:
      - name: Get branch from ref
        id: branch
        run: echo "value=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      - name: Ensure valid branch
        if: false == contains(fromJson('["master", "sandbox"]'), steps.branch.outputs.value)
        run: |
          echo "::error ${{ steps.branch.outputs.value }} cannot be deployed"
          exit 1

  build:
    needs: [prepare]
    name: "[${{ needs.prepare.outputs.branch }}] Build (${{matrix.app}}, ${{matrix.mode}})"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        app: [poster, video, tapping-board, drag-drop, memory, matching, flashcards, card-quiz, cover, resource-cover, legacy, find-answer]
        mode: [edit, play]
    steps:
      - name: "Set environment"
        env:
          BRANCH: ${{ needs.prepare.outputs.branch }}
        run: |
          if [[ ${BRANCH} == 'master' ]]; then
            echo "ENVIRONMENT=release" >> $GITHUB_ENV
            echo "MIXPANEL_PROJECT_TOKEN=${{ secrets.MIXPANEL_PROJECT_TOKEN_RELEASE }}" >> $GITHUB_ENV
            echo "GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY=${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_JSON_KEY }}" >> $GITHUB_ENV
            echo "STORAGE_BUCKET=ji-cloud-frontend-origin-eu-001" >> $GITHUB_ENV
          elif [[ ${BRANCH} == 'sandbox' ]]; then
            echo "ENVIRONMENT=sandbox" >> $GITHUB_ENV
            echo "MIXPANEL_PROJECT_TOKEN=${{ secrets.MIXPANEL_PROJECT_TOKEN_SANDBOX }}" >> $GITHUB_ENV
            echo "GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY=${{ secrets.GOOGLE_CLOUD_SERVICE_ACCOUNT_JSON_KEY_SANDBOX }}" >> $GITHUB_ENV
            echo "STORAGE_BUCKET=ji-cloud-sandbox-frontend-origin-eu-001" >> $GITHUB_ENV
          fi

      - uses: actions/checkout@v3

      - name: Extract label
        shell: bash
        run: echo "value=\"[${{needs.prepare.outputs.branch}} - module/${{ matrix.app }}/${{ matrix.mode }} - app]\"" >> $GITHUB_OUTPUT
        id: extract_label

      - name: Notify slack
        uses: pullreminders/slack-action@master
        with:
          args: '{\"channel\":\"CFYR62BRC\",\"text\":\"${{steps.extract_label.outputs.value}} starting...\"}'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly

      - uses: johnnynotsolucky/rust-cargo-make@node16

      - name: install node
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: install npm deps
        run: npm ci
        working-directory: "./frontend/apps"

      - name: install npm deps (build-utils)
        run: npm ci
        working-directory: "./frontend/build-utils"

      - name: build
        run: cargo make ${{ env.ENVIRONMENT }} "module/${{ matrix.app }}/${{ matrix.mode }}"
        working-directory: "./frontend/apps"
        env:
          LOCAL_CDN_FRONTEND_DIR: ${{ github.workspace }}/frontend
          MIXPANEL_PROJECT_TOKEN: ${{ env.MIXPANEL_PROJECT_TOKEN }}

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ env.GOOGLE_CLOUD_SERVICE_ACCOUNT_KEY }}'

      - name: install google cloud sdk
        uses: google-github-actions/setup-gcloud@v1

      - name: deploy to google cloud
        run: gsutil -m rsync -d -r frontend/apps/dist/module/${{ matrix.app }}/${{ matrix.mode }}/js gs://${{ env.STORAGE_BUCKET }}/module/${{ matrix.app }}/${{ matrix.mode }}/js

      - name: Notify slack of all status
        uses: pullreminders/slack-action@master
        with:
          args: '{\"channel\":\"CFYR62BRC\",\"text\":\"${{steps.extract_label.outputs.value}} ${{job.status}}\"}'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        if: always()
